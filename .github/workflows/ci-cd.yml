name: Healthcare System CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend CI/CD
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run backend tests
        run: |
          cd 04-backend
          mvn clean test

      - name: Run backend security scan
        run: |
          cd 04-backend
          mvn dependency:check

      - name: Build backend Docker image
        run: |
          cd 04-backend
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest .

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push backend Docker image
        if: github.event_name != 'pull_request'
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest

  # Frontend CI/CD
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 05-frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd 05-frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd 05-frontend
          npm run test -- --watch=false --browsers=ChromeHeadless

      - name: Run frontend linting
        run: |
          cd 05-frontend
          npm run lint

      - name: Build frontend
        run: |
          cd 05-frontend
          npm run build

      - name: Build frontend Docker image
        run: |
          cd 05-frontend
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest .

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push frontend Docker image
        if: github.event_name != 'pull_request'
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker-compose up -d mysql redis
          sleep 30

      - name: Run integration tests
        run: |
          cd 04-backend
          mvn verify -Dspring.profiles.active=test

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Deploy to development environment
        run: |
          echo "Deploying to development environment..."
          # Add your deployment logic here
          # Example: kubectl apply, docker-compose, etc.

  # Deploy to Production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: kubectl apply, docker-compose, etc.

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "Deployment completed successfully!"
          # Add notification logic (Slack, email, etc.)

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!"
          # Add failure notification logic 